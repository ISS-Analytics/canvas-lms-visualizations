include scripts
/ - ap data
h2 Assignments
- tardiness = {}
- tardiness[:missing] = {}
- tardiness[:late] = {}
- tardiness[:on_time] = {}
- data = data.sort_by { |k, _v| k['due_at'] } unless data.any? { |k, _v| k['due_at'].nil? }
- data.each do |assignment| \
    tardiness[:missing][assignment['title']] = [assignment['tardiness_breakdown']['missing'], assignment['tardiness_breakdown']['total']]; \
    tardiness[:late][assignment['title']] = [assignment['tardiness_breakdown']['late'], assignment['tardiness_breakdown']['total']]; \
    tardiness[:on_time][assignment['title']] = [assignment['tardiness_breakdown']['on_time'], assignment['tardiness_breakdown']['total']]; \
  end
- tardiness[:missing].delete_if { |key, _| key.nil? }
- tardiness[:late].delete_if { |key, _| key.nil? }
- tardiness[:on_time].delete_if { |key, _| key.nil? }
- tardiness[:missing] = Hash[tardiness[:missing].map { |k, v| [k, v[0] * v[1]] }]
- tardiness[:late] = Hash[tardiness[:late].map { |k, v| [k, v[0] * v[1]] }]
- tardiness[:on_time] = Hash[tardiness[:on_time].map { |k, v| [k, v[0] * v[1]] }]
h3 Tardiness
- tard = [{ name: 'Missing Submissions', data: tardiness[:missing] }, \
          { name: 'Late Submissions', data: tardiness[:late] }, \
          { name: 'On Time Submissions', data: tardiness[:on_time] }]
/ == area_chart tard, discrete: true
== column_chart tard, stacked: true, colors: ['#ED4337', '#434348', '#90ed7d']
/ h3 Median Scores as percentage of Possible Points
/ - scores = {}
/ - data.each { |assignment| scores[assignment['title']] = [assignment['median'], assignment['points_possible']] }
/ - scores.delete_if { |key, value| key.nil? || value.any?(&:nil?) }
/ - scores = Hash[scores.map { |key, value| [key, value[0]/value[1].to_f * 100] } ]
/ - MIN_PERCENTAGE = 0
/ - MAX_PERCENTAGE = 100
/ == column_chart scores, min: MIN_PERCENTAGE, max: MAX_PERCENTAGE
- scores = {}
- data.each { |assignment| scores[assignment['title']] =[\
              assignment['min_score'], assignment['first_quartile'],\
              assignment['median'], assignment['third_quartile'],\
              assignment['max_score']] }
- scores.delete_if { |key, value| key.nil? || value.any?(&:nil?) }
/ - ap data[10]
/ - ap tardiness
/ - ap scores
/ div id='assignment-box'
- scores_percent = {}
- data.each { |assignment| scores_percent[assignment['title']] =[\
              assignment['min_score'], assignment['first_quartile'],\
              assignment['median'], assignment['third_quartile'],\
              assignment['max_score'], assignment['points_possible']] }
- scores_percent.delete_if { |key, value| key.nil? || value.any?(&:nil?) }
- scores_percent.each do |key, values| \
    scores_percent[key] = values.map.each_with_index do |value, index| \
      value = (value / values[5].to_f * 100).round 2 unless index == 5 \
    end.compact \
  end
div align='center'
  input type='radio' class='assignment' name='assignment' value='normal' Regular
  input type='radio' class='assignment' name='assignment' value='flipped' Flipped
div id='assignment-box-percent'
div id='assignment-box-flipped'

javascript:
  var cat = JSON.parse("#{scores.keys}".replace(/&quot;/g, '"').replace(/amp;/g, ''));
  var values = JSON.parse("#{scores.values}");
  var cat_percent = JSON.parse("#{scores_percent.keys}".replace(/&quot;/g, '"').replace(/amp;/g, ''));
  var values_percent = JSON.parse("#{scores_percent.values}");
  $(function () {
    $('#assignment-box-flipped').highcharts({
        chart: {
            type: 'boxplot',
            inverted: true
        },
        title: {
            text: 'Box plot for Assignment Scores % (Flipped)'
        },
        legend: {
            enabled: false
        },
        xAxis: {
            categories: cat_percent,
            title: {
                text: 'Assignments'
            }
        },
        yAxis: {
            min: -10,
            max: 110,
            title: {
                text: 'Percent Scores'
            },
        },
        series: [{
            name: 'Observations',
            data: values_percent,
            tooltip: {
                headerFormat: '<em>Assignment: {point.key}</em><br/>'
            }
        }, {
            name: 'Outlier',
            color: Highcharts.getOptions().colors[0],
            type: 'scatter',
            data: [],
            marker: {
                fillColor: 'white',
                lineWidth: 1,
                lineColor: Highcharts.getOptions().colors[0]
            },
            tooltip: {
                pointFormat: 'Observation: {point.y}'
            }
        }]
    });
    $('#assignment-box-percent').highcharts({
        chart: {
            type: 'boxplot'
        },
        title: {
            text: 'Box plot for Assignment Scores %'
        },
        legend: {
            enabled: false
        },
        xAxis: {
            categories: cat_percent,
            title: {
                text: 'Assignments'
            }
        },
        yAxis: {
            min: 0,
            max: 100,
            title: {
                text: 'Percent Scores'
            }
        },
        series: [{
            name: 'Observations',
            data: values_percent,
            tooltip: {
                headerFormat: '<em>Assignment: {point.key}</em><br/>'
            }
        }, {
            name: 'Outlier',
            color: Highcharts.getOptions().colors[0],
            type: 'scatter',
            data: [],
            marker: {
                fillColor: 'white',
                lineWidth: 1,
                lineColor: Highcharts.getOptions().colors[0]
            },
            tooltip: {
                pointFormat: 'Observation: {point.y}'
            }
        }]
    });
  });

  var radios = document.getElementsByClassName('assignment'),
      normal_div = document.getElementById('assignment-box-percent'),
      flipped_div = document.getElementById('assignment-box-flipped');

  function changeChart() {
      "use strict";
      if (radios[0].checked == true) {
          normal_div.style.display = 'inline';
          flipped_div.style.display = 'none';
      } else if (radios[1].checked == true) {
          normal_div.style.display = 'none';
          flipped_div.style.display = 'inline';
      }
  }

  var radio,
      idx;

  for (idx = 0; idx < radios.length; idx += 1) {
      radio = radios[idx];
      radio.onclick = changeChart;
  }

  function clickRegular() {
      radios[1].checked = true;
      normal_div.style.display = 'none';
  }

  window.addEventListener('load', setTimeout(clickRegular, 1000));
